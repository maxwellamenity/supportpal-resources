{% extends parent_template %}

{% block sidebar %}
    {% include 'operator.' ~ template ~ '.report.sidebar' %}
{% endblock %}

{% block title %}
    {{ Lang.choice('report.report', 2) }} - {{ report.title }}
{% endblock %}

{% block description %}
    {{ report.description }}
{% endblock %}

{% block content %}

    {% if report.timeframe|default is not empty and report.timeframe != 'none' %}
    <div class="grid-options options box">
        <div class="timeframe-options">
            {{ form_button(Lang.get('general.update'), { 'class': 'updateReport right' }) }}
            {% if report.timeframe == 'custom' %}
                <div class="report-date">
                    <label>
                        {{ form_radio('timeframe', 0, report.startDate == 0 ? true : false) }} <strong>{{ Lang.get('report.all_time') }}</strong>
                    </label>
                </div> &nbsp;&nbsp;
                <div class="report-date">
                    <label>
                        {{ form_radio('timeframe', 1, report.startDate != 0 ? true : false) }} <strong>{{ Lang.get('report.specific_range') }}</strong>
                    </label>
                </div> &nbsp;&nbsp;
                <span class="report-date timeframeOptions {% if report.startDate == 0 %}hide{% endif %}">
                    <div class="report-date">
                        {{ Lang.get('general.start') }}: &nbsp;{{ form_text('startDate', null, { 'class': 'datepicker', 'placeholder': '&#xf073; &nbsp;' ~ Lang.get('general.start_date'), 'size': 12 }) }}
                    </div> &nbsp;&nbsp;
                    <div class="report-date">
                        {{ Lang.get('general.end') }}: &nbsp;{{ form_text('endDate', null, { 'class': 'datepicker', 'placeholder': '&#xf073; &nbsp;' ~ Lang.get('general.start_date'), 'size': 12 }) }}
                    </div>
                </span>
            {% else %}
                {{ Lang.get('general.current') }}: &nbsp;
                {% if report.timeframe == 'monthly' %}
                    {{ form_selectMonth('month') }}
                {% endif %}

                {{ form_select('year', year) }}
            {% endif %}
        </div>

        {% include 'operator.' ~ template ~ '.report.condition_group' %}
    </div>
    {% else %}
        {% include 'operator.' ~ template ~ '.report.condition_group' %}
    {% endif %}

    <div class="loading box hide">{{ Lang.get('general.loading') }}<i class="ellipsis"><i>.</i><i>.</i><i>.</i></i></div>

    <div class="reportContent">

        {% if in_array('table', report.charts) and report.charts|length != 1 %}
        <ul class="tabs">
          <li class="{% if report.charts[0] != 'table' %}type-active active{% endif %}">{{ Lang.get('report.chart') }}</li>
          <li class="{% if report.charts[0] == 'table' %}type-active active{% endif %}">{{ Lang.get('report.table') }}</li>
        </ul>
        {% endif %}

        <div id="chartWrapper" {% if report.charts[0] == 'table' %}class="hide"{% endif %}>
            <div style="text-align: center;" {% if (in_array('table', report.charts) and report.charts|length <= 2) or (not in_array('table', report.charts) and report.charts|length == 1) %}class="hide"{% endif %}>
                <strong>{{ Lang.get('general.type') }}:</strong> &nbsp;
                <select name="chartType">
                    {% if in_array('pie', report.charts) %}<option value="pie">{{ Lang.get('report.pie') }}</option>{% endif %}
                    {% if in_array('bar', report.charts) %}<option value="bar">{{ Lang.get('report.bar') }}</option>{% endif %}
                    {% if in_array('column', report.charts) %}<option value="column">{{ Lang.get('report.column') }}</option>{% endif %}
                    {% if in_array('histogram', report.charts) %}<option value="histogram">{{ Lang.get('report.histogram') }}</option>{% endif %}
                    {% if in_array('line', report.charts) %}<option value="line">{{ Lang.get('report.line') }}</option>{% endif %}
                    {% if in_array('area', report.charts) %}<option value="area">{{ Lang.get('report.area') }}</option>{% endif %}
                    {% if in_array('stacked', report.charts) %}<option value="stacked">{{ Lang.get('report.stacked') }}</option>{% endif %}
                    {% if in_array('stepped', report.charts) %}<option value="stepped">{{ Lang.get('report.stepped') }}</option>{% endif %}
                    {% if in_array('geo', report.charts) %}<option value="geo">{{ Lang.get('report.geo') }}</option>{% endif %}
                </select>
            </div>
          <div id="chartView" style="width: 100%; height:500px;"></div>
        </div>

        {% if in_array('table', report.charts) %}
            <div id="tableView" style="width: 100%;" {% if report.charts|length != 1 and report.charts != 'table' %}class="hide"{% endif %}></div>
        {% endif %}

    </div>

{% endblock %}

{% block scripts_footer %}
    <link rel="stylesheet" type="text/css" href="{{ asset_rev('resources/assets/operator/css/report.css') }}">
    <link rel="stylesheet" type="text/css" href="{{ asset_rev('resources/assets/operator/css/filtering.css') }}">

    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

    <script type="text/javascript" src="{{ asset_rev('resources/assets/libs/datatables.net-buttons.min.js') }}"></script>

    <script src="{{ asset_rev('resources/assets/operator/js/filtering.js') }}"></script>

    <script type="text/javascript">
        var chartData, startTimestamp, endTimestamp;

        // Load charts
        google.charts.load('45', {packages: ['corechart']});
        google.charts.setOnLoadCallback(function () {
            loadChart(JSON.parse('{{ report.data|escape('js') }}'));
        });

        $(document).ready(function() {

            // Expand the filtering box on click
            $(document).on('click', '.conditiongroup-header', function () {
                $('.filter-conditions').toggle();

                // If we're toggling to show and it's currently empty, insert new condition
                if ($('.filter-conditions').is(':visible') && ! $('.filter-conditions .condition:visible').length) {
                    $('.filter-conditions .add-condition').trigger('click');
                }
            });

            // Date pickers
            var startPicker = new Pikaday({
                field: $('input[name="startDate"]')[0],
                format: $('meta[name=date_format]').prop('content')
            });
            var endPicker = new Pikaday({
                field: $('input[name="endDate"]')[0],
                format: $('meta[name=date_format]').prop('content')
            });

            // Set chart type dropdown to first item
            {% if report.charts|length != 1 or report.charts|length == 1 and report.charts[0] != 'table' %}
                var defaultChart = '{{ report.charts[0] }}';
                {% if report.charts|length > 1 %}
                if (defaultChart == 'table') {
                    var defaultChart = '{{ report.charts[1] }}';
                }
                {% endif %}
                $('select[name="chartType"]').val(defaultChart);
            {% endif %}

            var timeframe = '{{ report.timeframe }}';

            // Set the current period
            if (timeframe == 'yearly' || timeframe == 'monthly') {
                // Monthly/Yearly
                var startDate = moment.utc('{{ report.startDate }}', 'X')
                $('select[name="year"]').val(startDate.year());
                if (timeframe == 'monthly') {
                    $('select[name="month"]').val(startDate.month() + 1);
                }
            } else {
                // Custom timeframe
                {% if report.startDate != 0 %}
                    startPicker.setDate(moment.utc('{{ report.startDate }}', 'X').format('YYYY-MM-DD'));
                {% endif %}
                endPicker.setDate(moment.utc('{{ report.endDate}}', 'X').format('YYYY-MM-DD'));
            }

            $(document.body).on('click', '.updateReport', function() {
                var startDate = null, endDate = null;
                // Depending on timeframe
                if (timeframe == 'yearly' || timeframe == 'monthly') {
                    if (timeframe == 'monthly') {
                        // Monthly - Get new start and end date
                        var date = new Date($('select[name="year"]').val(), parseInt($('select[name="month"]').val() - 1), 1, 0, 0, 0, 0);
                        startDate = moment(date).format($('meta[name=date_format]').prop('content'));
                        date = new Date($('select[name="year"]').val(), $('select[name="month"]').val(), 0, 23, 59, 59, 0);
                        endDate = moment(date).format($('meta[name=date_format]').prop('content'));
                    } else {
                        // Yearly - Get new start and end date
                        var date = new Date($('select[name="year"]').val(), 0, 1, 0, 0, 0, 0);
                        startDate = moment(date).format($('meta[name=date_format]').prop('content'));
                        date = new Date($('select[name="year"]').val(), 11, 31, 23, 59, 59, 0);
                        endDate = moment(date).format($('meta[name=date_format]').prop('content'));
                    }
                } else {
                    // Specific range
                    if ($('input[name="timeframe"]:checked').val() == 1) {
                        startDate = startPicker.getMoment().format($('meta[name=date_format]').prop('content'));
                        endDate = endPicker.getMoment().format($('meta[name=date_format]').prop('content'));
                    }
                }

                // Fetch new data and update
                getData(startDate, endDate);
            });

            // Changing options on custom timeframe
            $('input[name="timeframe"]').on('change', function() {
                if ($(this).val() == 1) {
                    $('.timeframeOptions').show();
                } else {
                    $('.timeframeOptions').hide();
                }
            });

            // For switching between chart and table
            $('.tabs').on('click', 'li:not(.type-active)', function() {
                $('#chartWrapper, #tableView').toggle();
                $('.tabs li').removeClass('type-active');
                $(this).addClass('type-active');
                if ($('#chartWrapper').is(':visible')) {
                    drawChart(chartData, $('select[name="chartType"]').val());
                }
            });

            // Changing chart type
            $('select[name="chartType"]').on('change', function() {
                drawChart(chartData, $(this).val());
            });
        });

        // Fetches new data based on time parameters
        function getData(startDate, endDate) {
            $('.loading').show();
            $('.reportContent').hide();

            var data = $(".conditiongroup").serializeArray();
            data.push({ name: 'startDate', value: startDate });
            data.push({ name: 'endDate', value: endDate });

            $.post(
                laroute.route("report.operator.getData", { 'category': "{{ report.category }}", 'name': "{{ report.slug }}" }),
                data,
                function(response) {
                    // Remove loading from view
                    $('.loading').hide();
                    // Remove the existing table if it exists
                    $('.dataTables_wrapper').remove();
                    $('.reportContent').show();
                    // Parse data and load chart
                    loadChart(JSON.parse(response.data));
                },
                "json"
            );
        }

        // Recursively decode HTML entities.
        function decodeHtmlEntities(item) {
            if (item instanceof Array) {
                return array_map(decodeHtmlEntities, item);
            } else if (typeof item === 'string') {
                return he.decode(item);
            } else {
                return item;
            }
        }

        // Takes the data and converts it to a chart friendly format
        function loadChart(data) {
            // Draw the Google chart.
            // Decode HTML entities as Google charts displays as-is (DEV-888).
            chartData = google.visualization.arrayToDataTable(array_map(decodeHtmlEntities, data));
            drawChart(chartData, $('select[name="chartType"]').val());

            var head = [];

            // Create table heading
            $.each(data[0], function(key, val) {
                var obj = {};
                obj["title"] = val;
                head.push(obj);
            });

            // Remove heading from data
            data.splice(0,1);

            $('#tableView').append('<table class="data-table settings"></table>');

            // Set data table
            $('.data-table').dataTable({
                "columns": head,
                "data": data,
                "order": [],
                "bProcessing": true,
                "dom": '<"table-buttons"B>lfrtip',
                "language": {{ dataTable_lang|raw }},
                "buttons": [
                    {
                        extend: 'print',
                        autoPrint: false,
                        exportOptions: {
                            // Don't decode entities as it's already decoded
                            decodeEntities: false
                        }
                    }, 'csv', 'pdf', 'excel'
                ]
            });
        }

        // Draws the chart from the data and type of chart
        function drawChart(data, type) {
            try {
                if (type === 'pie') {
                    // Configure chart
                    var chart = new google.visualization.PieChart(document.getElementById('chartView'));
                    var options = {
                        'pieSliceText': 'value',
                        'legend': 'right',
                        'sliceVisibilityThreshold': 0
                    };
                } else if (type === 'bar') {
                    var chart = new google.visualization.BarChart(document.getElementById('chartView'));
                    var options = {};
                } else if (type === 'column') {
                    var chart = new google.visualization.ColumnChart(document.getElementById('chartView'));
                    var options = {};
                } else if (type === 'histogram') {
                    var chart = new google.visualization.Histogram(document.getElementById('chartView'));
                    var options = {
                        legend: { position: 'none' }
                    };
                } else if (type === 'line') {
                    var chart = new google.visualization.LineChart(document.getElementById('chartView'));
                    var options = {};
                } else if (type === 'area') {
                    var chart = new google.visualization.AreaChart(document.getElementById('chartView'));
                    var options = {};
                } else if (type === 'stacked') {
                    var chart = new google.visualization.AreaChart(document.getElementById('chartView'));
                    var options = {
                        isStacked: true
                    };
                } else if (type === 'stepped') {
                    var chart = new google.visualization.SteppedAreaChart(document.getElementById('chartView'));
                    var options = {
                        isStacked: true
                    };
                } else if (type === 'geo') {
                    var chart = new google.visualization.GeoChart(document.getElementById('chartView'));
                    var options = {};
                }
                // Draw chart
                chart.draw(data, options);
            } catch(err) {
                // Nothing to do here...
            }
        }
    </script>
{% endblock %}
